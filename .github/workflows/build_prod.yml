# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

<<<<<<< HEAD
name: Maven Package - PROD - My Java App Nadav Binyamin
=======
name: Java CI with Maven
>>>>>>> d5fd9e9d8706656894047baf3a5281f506793f91

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

<<<<<<< HEAD
env:
  REPOSITORY: maven-hello-world
  REPO_ACCESS_PAT: ${{ secrets.GIT_KEY }}

=======
>>>>>>> d5fd9e9d8706656894047baf3a5281f506793f91
jobs:
  build:

    runs-on: ubuntu-latest
<<<<<<< HEAD
    
    steps:
    - name: Clone Github Repository
      # You may pin to the exact commit or the version.
      # uses: GuillaumeFalourd/clone-github-repo-action@8e2d67e601742dcfd167324473bb9ae3f05d203e
      uses: GuillaumeFalourd/clone-github-repo-action@v2
      with:
        # Repository Owner
        owner: nadavb2310
        # Repository name
        repository: ${{ env.REPOSITORY }}
        access-token: ${{ env.REPO_ACCESS_PAT }}

    - name: Bump jar version
      id: bump
      run: |
        OLD_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        BUMP_MODE="none"
        old="$OLD_VERSION"
        parts=( ${old//./ } )
        bv=$((parts[2] + 1))
        NEW_VERSION="${parts[0]}.${parts[1]}.${bv}"
        echo "pom.xml will be bumped from" $OLD_VERSION "to" $NEW_VERSION
        mvn -q versions:set -DnewVersion="${NEW_VERSION}" --file pom.xml
        echo ::set-output name=jar_version::${NEW_VERSION}
      working-directory: maven-hello-world/my-app/
    
    - name: Docker build
      run: |
        cd maven-hello-world/my-app
        docker build . -t my-app-java:${{ steps.bump.outputs.jar_version }} -f Dockerfile --build-arg ${{ steps.bump.outputs.jar_version }}
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker push 
      run: |
        docker push my-app-java:${{ steps.bump.outputs.jar_version }}
    
  run:
    runs-on: ubuntu-18.04
    needs: [build]
    
    steps:
    - name: Run container
      run: |
        docker run my-app-java:${{needs.build.outputs.jar_version}}
=======

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
>>>>>>> d5fd9e9d8706656894047baf3a5281f506793f91
